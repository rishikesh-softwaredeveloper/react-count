{"version":3,"sources":["components/navbar.jsx","components/counter.jsx","components/counters.jsx","App.js","serviceWorker.js","index.js"],"names":["NavBar","totalCounters","console","log","className","href","Counter","prevProps","prevState","counter","value","this","props","getBadgeClasses","formatCount","onClick","onIncrement","onDelete","id","classes","Component","Counters","onReset","counters","map","key","App","state","handleIncrement","i","indexOf","setState","handleReset","c","handleDelete","counterId","filter","Fragment","length","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"wPAgBeA,G,MAdA,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,cAEhB,OADAC,QAAQC,IAAI,mBAEV,yBAAKC,UAAU,gCACb,uBAAGA,UAAU,eAAeC,KAAK,KAAjC,SACS,IACP,0BAAMD,UAAU,oCACbH,OCmCIK,E,iLA1CMC,EAAWC,GAC5BN,QAAQC,IAAI,YAAaI,GACzBL,QAAQC,IAAI,aAAcK,GACtBD,EAAUE,QAAQC,MAAUC,KAAKC,MAAMH,QAAQC,Q,6CAKnDR,QAAQC,IAAI,qB,+BAEJ,IAAD,OAEP,OADAD,QAAQC,IAAI,oBAEV,6BACE,0BAAMC,UAAWO,KAAKE,mBAAoBF,KAAKG,eAC/C,4BACEC,QAAS,kBAAM,EAAKH,MAAMI,YAAY,EAAKJ,MAAMH,UACjDL,UAAU,4BAFZ,aAMA,4BACEW,QAAS,kBAAM,EAAKH,MAAMK,SAAS,EAAKL,MAAMH,QAAQS,KACtDd,UAAU,6BAFZ,a,wCAUJ,IAAIe,EAAU,mBAEd,OADAA,GAAwC,IAA7BR,KAAKC,MAAMH,QAAQC,MAAc,UAAY,Y,oCAI3C,IACLA,EAAUC,KAAKC,MAAMH,QAArBC,MACR,OAAiB,IAAVA,EAAc,OAASA,M,GAvCZU,aCwBPC,E,uKApBXnB,QAAQC,IAAI,qBADL,MAE8CQ,KAAKC,MAAlDU,EAFD,EAECA,QAASC,EAFV,EAEUA,SAAUN,EAFpB,EAEoBA,SAAUD,EAF9B,EAE8BA,YACrC,OACE,6BACE,4BAAQD,QAASO,EAASlB,UAAU,8BAApC,SAGCmB,EAASC,KAAI,SAACf,GAAD,OACZ,kBAAC,EAAD,CACEgB,IAAKhB,EAAQS,GACbD,SAAUA,EACVD,YAAaA,EACbP,QAASA,Y,GAdEW,aC4DRM,E,kDAjDb,aAAe,IAAD,8BACZ,gBATFC,MAAQ,CACNJ,SAAU,CACR,CAAEL,GAAI,EAAGR,MAAO,GAChB,CAAEQ,GAAI,EAAGR,MAAO,GAChB,CAAEQ,GAAI,EAAGR,MAAO,GAChB,CAAEQ,GAAI,EAAGR,MAAO,KAGN,EAWdkB,gBAAkB,SAACnB,GACjB,IAAMc,EAAQ,YAAO,EAAKI,MAAMJ,UAC1BM,EAAIN,EAASO,QAAQrB,GAC3Bc,EAASM,GAAT,eAAmBpB,GACnBc,EAASM,GAAGnB,QACZ,EAAKqB,SAAS,CAAER,cAhBJ,EAkBdS,YAAc,WACZ,IAAMT,EAAW,EAAKI,MAAMJ,SAASC,KAAI,SAACS,GAExC,OADAA,EAAEvB,MAAQ,EACHuB,KAET,EAAKF,SAAS,CAAER,cAvBJ,EAyBdW,aAAe,SAACC,GACd,IAAMZ,EAAW,EAAKI,MAAMJ,SAASa,QAAO,SAACH,GAAD,OAAOA,EAAEf,KAAOiB,KAC5D,EAAKJ,SAAS,CAAER,cAzBhBrB,QAAQC,IAAI,mBAFA,E,gEAQZD,QAAQC,IAAI,iB,+BAwBZ,OADAD,QAAQC,IAAI,iBAEV,kBAAC,IAAMkC,SAAP,KACE,kBAAC,EAAD,CACEpC,cAAeU,KAAKgB,MAAMJ,SAASa,QAAO,SAACH,GAAD,OAAOA,EAAEvB,MAAQ,KAAG4B,SAEhE,0BAAMlC,UAAU,aACd,kBAAC,EAAD,CACEmB,SAAUZ,KAAKgB,MAAMJ,SACrBD,QAASX,KAAKqB,YACdhB,YAAaL,KAAKiB,gBAClBX,SAAUN,KAAKuB,qB,GAnDTd,aCOEmB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLrD,QAAQqD,MAAMA,EAAMC,a","file":"static/js/main.ff0a6124.chunk.js","sourcesContent":["import React from \"react\";\n//stateless functional components\nconst NavBar = ({ totalCounters }) => {\n  console.log(\"NavBar-Rendered\");\n  return (\n    <nav className=\"navbar navbar-light bg-light\">\n      <a className=\"navbar-brand\" href=\"#\">\n        Navbar{\" \"}\n        <span className=\"badge badge-pill badge-secondary\">\n          {totalCounters}\n        </span>\n      </a>\n    </nav>\n  );\n};\n\nexport default NavBar;\n","import React, { Component } from \"react\";\nclass Counter extends Component {\n  componentDidUpdate(prevProps, prevState) {\n    console.log(\"prevprops\", prevProps);\n    console.log(\"prevstates\", prevState);\n    if (prevProps.counter.value !== this.props.counter.value) {\n      //aja call and get new data from the server\n    }\n  }\n  componentWillUnmount() {\n    console.log(\"counter-unmount\");\n  }\n  render() {\n    console.log(\"counter-rendered\");\n    return (\n      <div>\n        <span className={this.getBadgeClasses()}>{this.formatCount()}</span>\n        <button\n          onClick={() => this.props.onIncrement(this.props.counter)}\n          className=\"btn btn-secondary btn-sm\"\n        >\n          increment\n        </button>\n        <button\n          onClick={() => this.props.onDelete(this.props.counter.id)}\n          className=\"btn btn-danger btn-sm m-2\"\n        >\n          Delete\n        </button>\n      </div>\n    );\n  }\n  getBadgeClasses() {\n    let classes = \"badge m-2 badge-\";\n    classes += this.props.counter.value === 0 ? \"warning\" : \"primary\";\n    return classes;\n  }\n\n  formatCount() {\n    const { value } = this.props.counter;\n    return value === 0 ? \"zero\" : value;\n  }\n}\n\nexport default Counter;\n","import React, { Component } from \"react\";\nimport Counter from \"./counter\";\n\nclass Counters extends Component {\n  render() {\n    console.log(\"counters-rendered\");\n    const { onReset, counters, onDelete, onIncrement } = this.props;\n    return (\n      <div>\n        <button onClick={onReset} className=\"btn btn-primary btn-sm m-2\">\n          Reset\n        </button>\n        {counters.map((counter) => (\n          <Counter\n            key={counter.id}\n            onDelete={onDelete}\n            onIncrement={onIncrement}\n            counter={counter}\n          />\n        ))}\n      </div>\n    );\n  }\n}\n\nexport default Counters;\n","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport NavBar from \"./components/navbar\";\nimport Counters from \"./components/counters\";\n\nclass App extends Component {\n  state = {\n    counters: [\n      { id: 1, value: 4 },\n      { id: 2, value: 0 },\n      { id: 3, value: 0 },\n      { id: 4, value: 0 },\n    ],\n  };\n  constructor() {\n    super();\n    console.log(\"app-constructor\");\n    // this.state=this.props.something;\n  }\n  componentDidMount() {\n    //aja call\n    // this.setState({movies})\n    console.log(\"app-mounted\");\n  }\n\n  handleIncrement = (counter) => {\n    const counters = [...this.state.counters];\n    const i = counters.indexOf(counter);\n    counters[i] = { ...counter };\n    counters[i].value++;\n    this.setState({ counters });\n  };\n  handleReset = () => {\n    const counters = this.state.counters.map((c) => {\n      c.value = 0;\n      return c;\n    });\n    this.setState({ counters });\n  };\n  handleDelete = (counterId) => {\n    const counters = this.state.counters.filter((c) => c.id !== counterId);\n    this.setState({ counters });\n  };\n\n  render() {\n    console.log(\"app- rendered\");\n    return (\n      <React.Fragment>\n        <NavBar\n          totalCounters={this.state.counters.filter((c) => c.value > 0).length}\n        />\n        <main className=\"container\">\n          <Counters\n            counters={this.state.counters}\n            onReset={this.handleReset}\n            onIncrement={this.handleIncrement}\n            onDelete={this.handleDelete}\n          />\n        </main>\n      </React.Fragment>\n    );\n  }\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport \"bootstrap/dist/css/bootstrap.css\";\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}